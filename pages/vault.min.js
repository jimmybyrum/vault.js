(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (process){(function (){
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var browser_1 = require("./lib/browser");

var memory_1 = __importDefault(require("./lib/memory"));

var cleanup_1 = require("./lib/cleanup");

var Vault = {
  version: process.env.npm_package_version,
  Cookie: browser_1.Cookie,
  Local: browser_1.Local,
  Session: browser_1.Session,
  Memory: memory_1["default"],
  startCleanup: cleanup_1.start,
  stopCleanup: cleanup_1.stop,
  setIntervalLength: cleanup_1.setIntervalLength,
  getIntervalLength: cleanup_1.getIntervalLength,
  set: function set(key, value, config) {
    var expires = config && config.expires; // console.log('set', key, value, 'expires:', expires);

    switch (expires) {
      case 'page':
        console.log('page');
        memory_1["default"].set(key, value, config);
        break;

      case 'session':
        console.log('session');
        browser_1.Session.set(key, value, config);
        break;

      default:
        console.log('local');
        browser_1.Local.set(key, value, config);
        break;
    }
  },
  get: function get(key) {
    var types = [memory_1["default"], browser_1.Session, browser_1.Local, browser_1.Cookie];
    var i;

    for (i = 0; i < types.length; i++) {
      var value = types[i].get(key);

      if (value !== undefined) {
        return value;
      }
    }
  },
  list: function list(raw) {
    console.log('--== Memory ==--');
    memory_1["default"].list();
    console.log('----------------');
    console.log('--== Session ==--');
    browser_1.Session.list(raw);
    console.log('----------------');
    console.log('--== Local ==--');
    browser_1.Local.list(raw);
    console.log('----------------');
    console.log('--== Cookie ==--');
    browser_1.Cookie.list();
    console.log('----------------');
  },
  getLists: function getLists() {
    return {
      Memory: memory_1["default"].getList(),
      Session: browser_1.Session.getList(),
      Local: browser_1.Local.getList(),
      Cookie: browser_1.Cookie.getList()
    };
  },
  remove: function remove(key) {
    memory_1["default"].remove(key);
    browser_1.Session.remove(key);
    browser_1.Local.remove(key);
    browser_1.Cookie.remove(key);
  },
  clear: function clear() {
    memory_1["default"].clear();
    browser_1.Session.clear();
    browser_1.Local.clear();
    browser_1.Cookie.clear();
  }
}; // @ts-ignore

window.Vault = Vault;
exports["default"] = Vault;
(0, cleanup_1.start)([browser_1.Cookie, browser_1.Local, browser_1.Session, memory_1["default"]]);

}).call(this)}).call(this,require('_process'))
},{"./lib/browser":2,"./lib/cleanup":3,"./lib/memory":7,"_process":11}],2:[function(require,module,exports){
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Session = exports.Local = exports.Cookie = void 0;

var meta_1 = require("./meta");

var config_1 = require("./config");

var cookie_1 = __importDefault(require("./cookie"));

var prepare_1 = __importDefault(require("./prepare"));

var parse_1 = __importDefault(require("./parse"));

exports.Cookie = cookie_1["default"];

var setup = function setup(type) {
  // @ts-ignore
  var nativeStorage = window[type];

  try {
    var testKey = 'vault-test';
    nativeStorage.setItem(testKey, 'bar');
    nativeStorage.removeItem(testKey);
  } catch (e) {
    console.warn("Vault: ".concat(type, " is not supported. I will attempt to use Cookies instead."));
    return exports.Cookie;
  }

  var storage = {
    type: type,
    get: function get(key, default_value) {
      if (default_value === void 0) {
        default_value = undefined;
      }

      if (nativeStorage[key] !== undefined) {
        var keyMeta = (0, meta_1.checkKeyMeta)(nativeStorage, key);

        if (keyMeta) {
          return default_value;
        }

        var value = (0, parse_1["default"])(nativeStorage[key]);
        return value && value.value || value;
      }

      return default_value;
    },
    getItem: function getItem(key, default_value) {
      if (default_value === void 0) {
        default_value = undefined;
      }

      return storage.get(key, default_value);
    },
    getAndRemove: function getAndRemove(key) {
      var value = storage.get(key);
      storage.remove(key);
      return value;
    },
    getList: function getList() {
      var list = [];
      var i;

      for (i in nativeStorage) {
        var item = {};
        item[i] = nativeStorage.getItem(i);
        list.push(item);
      }

      return list;
    },
    set: function set(key, value, config) {
      if (!key) {
        return console.warn('Vault: set was called with no key.', key);
      }

      try {
        // if (type === 'sessionStorage' && config && config.expires) {
        //   delete config.expires;
        // }
        (0, meta_1.setKeyMeta)(nativeStorage, key, config);
        return nativeStorage.setItem(key, (0, prepare_1["default"])(value));
      } catch (e) {
        console.warn('Vault: I cannot write to localStoarge even though localStorage is supported. Perhaps you are using your browser in private mode? Here is the error: ', e);
      }
    },
    setItem: function setItem(key, value, config) {
      if (config === void 0) {
        config = {};
      }

      storage.set(key, value, config);
    },
    remove: function remove(key) {
      (0, meta_1.clearKeyMeta)(nativeStorage, key);
      return nativeStorage.removeItem(key);
    },
    removeItem: function removeItem(key) {
      return storage.remove(key);
    },
    clear: function clear() {
      return nativeStorage.clear();
    },
    list: function list(raw) {
      var il = nativeStorage.length;
      var i;

      if (il === 0) {
        console.log('0 items in', type);
        return undefined;
      }

      var counter = 0;

      for (i in nativeStorage) {
        if (i !== config_1.vaultData && counter < il) {
          var value = raw ? (0, parse_1["default"])(nativeStorage[i]) : storage.get(i);
          console.log(i, '=', value);
        }

        counter++;
      }
    }
  };
  return storage;
};

exports.Local = setup('localStorage');
exports.Session = setup('sessionStorage');

},{"./config":4,"./cookie":5,"./meta":8,"./parse":9,"./prepare":10}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setIntervalLength = exports.getIntervalLength = exports.stop = exports.start = void 0;
var typesCache = [];
var running = true;
var timeout;
var intervalLength = 5000;
var hasWarned = false;

var start = function start(types) {
  if (!types && typesCache) {
    types = typesCache;
  } else {
    typesCache = types;
  }

  doCleanup(types);
};

exports.start = start;

function doCleanup(types) {
  types.forEach(function (item) {
    try {
      item.getList();
    } catch (e) {
      if (!hasWarned) {
        hasWarned = true;
        console.warn('interval error', e);
      }
    }
  });

  if (running) {
    timeout = setTimeout(function () {
      doCleanup(types);
    }, intervalLength);
  }
}

var stop = function stop() {
  running = false;
  clearTimeout(timeout);
};

exports.stop = stop;

var getIntervalLength = function getIntervalLength() {
  return intervalLength;
};

exports.getIntervalLength = getIntervalLength;

var setIntervalLength = function setIntervalLength(length) {
  intervalLength = length;
};

exports.setIntervalLength = setIntervalLength;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vaultData = exports.vaultFile = void 0;
exports.vaultFile = '.vault.json';
exports.vaultData = '__vaultData';

},{}],5:[function(require,module,exports){
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var prepare_1 = __importDefault(require("./prepare"));

var parse_1 = __importDefault(require("./parse"));

var getExpires_1 = __importDefault(require("./getExpires"));

var isBrowser = typeof window !== 'undefined';
var Cookie = {
  type: 'cookie',
  parse: function parse(value) {
    return (0, parse_1["default"])(decodeURIComponent(value));
  },
  get: function get(cookie, default_value) {
    if (default_value === void 0) {
      default_value = undefined;
    }

    var cookies = document.cookie.split(';');
    var cl = cookies.length;
    var c;

    for (c = 0; c < cl; c++) {
      var pair = cookies[c].split('=');
      pair[0] = pair[0].replace(/^[ ]/, '');

      if (pair[0] === cookie) {
        return this.parse(pair[1]);
      }
    }

    return default_value;
  },
  getItem: function getItem(cookie, default_value) {
    if (default_value === void 0) {
      default_value = undefined;
    }

    return this.get(cookie, default_value);
  },
  getAndRemove: function getAndRemove(key, config) {
    var value = this.get(key);
    this.remove(key, config);
    return value;
  },
  getList: function getList() {
    var list = [];

    if (isBrowser && document.cookie !== '') {
      var cookies = document.cookie.split(';');
      var cl = cookies.length;
      var c = void 0;

      for (c = 0; c < cl; c++) {
        var pair = cookies[c].split('=');
        pair[0] = pair[0].replace(/^[ ]/, '');
        var item = {};
        item[pair[0]] = this.parse(pair[1]);
        list.push(item);
      }
    }

    return list;
  },
  set: function set(key, value, config) {
    if (config === void 0) {
      config = {};
    }

    if (!key) {
      return console.warn('Vault: set was called with no key.', key);
    }

    var expires = '';

    if (config.expires) {
      var exp = (0, getExpires_1["default"])(config);
      expires = '; expires=' + exp.toUTCString();
    }

    var max_age = '';

    if (config.max_age) {
      max_age = '; max-age=' + config.max_age;
    }

    var domain = '';

    if (config.domain) {
      domain = '; domain=' + config.domain;
    }

    var cookiePath = '';

    if (config.path) {
      cookiePath = '; path=' + config.path;
    }

    var secure = config.secure ? '; secure' : ''; // always encode cookie values because JSON cookie values
    // can cause problems.

    value = encodeURIComponent((0, prepare_1["default"])(value)) + cookiePath + domain + max_age + expires + secure; // console.log(`Vault: set cookie "${key}": ${value}`);

    document.cookie = key + '=' + value;
  },
  setItem: function setItem(key, value, config) {
    if (config === void 0) {
      config = {};
    }

    return this.set(key, value, config);
  },
  remove: function remove(key, config) {
    if (config === void 0) {
      config = {};
    }

    config.expires = '1970-01-01T00:00:01Z';
    this.set(key, '', config);
  },
  removeItem: function removeItem(key, config) {
    if (config === void 0) {
      config = {};
    }

    this.remove(key, config);
  },
  clear: function clear() {
    var cookies = document.cookie.split(';');
    var cl = cookies.length;
    var c;

    for (c = 0; c < cl; c++) {
      var pair = cookies[c].split('=');
      pair[0] = pair[0].replace(/^[ ]/, '');
      this.remove(pair[0]);
    }
  },
  list: function list() {
    var cookies = document.cookie.split(';');
    var cl = cookies.length;

    if (document.cookie === '' || cl === 0) {
      console.log('0 cookies');
      return undefined;
    }

    var c;

    for (c = 0; c < cl; c++) {
      var pair = cookies[c].split('=');
      pair[0] = pair[0].replace(/^[ ]/, '');
      console.log(pair[0], '=', this.parse(pair[1]));
    }
  }
};
exports["default"] = Cookie;

},{"./getExpires":6,"./parse":9,"./prepare":10}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function default_1(config) {
  if (config === void 0) {
    config = {};
  }

  if (!config.expires) {
    config.expires = 'session';
  } // looking for something like: "+5 days"


  if (config.expires.match(/^(\+|\-)\d+\s\w+/)) {
    var expires = new Date();
    var operator = config.expires.substring(0, 1);
    var parts = config.expires.substring(1).split(' ');
    var num = parseInt(parts[0], 10);
    var time = parts[1];

    switch (time) {
      case 'millisecond':
      case 'milliseconds':
        time = 'Milliseconds';
        break;

      case 'second':
      case 'seconds':
        time = 'Seconds';
        break;

      case 'minute':
      case 'minutes':
        time = 'Minutes';
        break;

      case 'hour':
      case 'hours':
        time = 'Hours';
        break;

      case 'day':
      case 'days':
        time = 'Date';
        break;

      case 'month':
      case 'months':
        time = 'Month';
        break;

      case 'year':
      case 'years':
        time = 'FullYear';
        break;
    }

    if (operator === '-') {
      expires['set' + time](expires['get' + time]() - num);
    } else {
      expires['set' + time](expires['get' + time]() + num);
    }

    return expires;
  }

  return new Date(config.expires);
}

exports["default"] = default_1;

},{}],7:[function(require,module,exports){
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var meta_1 = require("./meta");

var prepare_1 = __importDefault(require("./prepare"));

var parse_1 = __importDefault(require("./parse"));

var config_1 = require("./config");

var cache = {};
var Memory = {
  type: 'Memory',
  get: function get(key, default_value) {
    if (default_value === void 0) {
      default_value = undefined;
    }

    var keyMeta = (0, meta_1.checkKeyMeta)(this, key);

    if (keyMeta) {
      return default_value;
    }

    var cacheKey = cache[key];

    if (cacheKey === undefined) {
      return default_value;
    }

    return (0, parse_1["default"])(cacheKey);
  },
  getItem: function getItem(key, default_value) {
    if (default_value === void 0) {
      default_value = undefined;
    }

    return this.get(key, default_value);
  },
  getAndRemove: function getAndRemove(key) {
    var value = cache[key];
    delete cache[key];
    return value;
  },
  getList: function getList() {
    var list = [];
    var key;

    for (key in cache) {
      var obj = {};
      obj[key] = this.get(key);
      list.push(obj);
    }

    return list;
  },
  set: function set(key, value, config) {
    if (!key) {
      return console.warn('Vault: set was called with no key.', key);
    }

    cache[key] = (0, prepare_1["default"])(value);
    (0, meta_1.setKeyMeta)(this, key, config);
    return cache[key];
  },
  setItem: function setItem(key, value, config) {
    return this.set(key, value, config);
  },
  remove: function remove(key) {
    try {
      delete cache[key];
    } catch (e) {}
  },
  removeItem: function removeItem(key) {
    this.remove(key);
  },
  clear: function clear() {
    cache = {};
  },
  list: function list() {
    var key;

    for (key in cache) {
      if (key !== config_1.vaultData) {
        var value = this.get(cache[key]);
        console.log("".concat(key, " = ").concat(value));
      }
    }
  }
};
exports["default"] = Memory;

},{"./config":4,"./meta":8,"./parse":9,"./prepare":10}],8:[function(require,module,exports){
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkKeyMeta = exports.clearKeyMeta = exports.getKeyMeta = exports.setKeyMeta = exports.getData = void 0;

var config_1 = require("./config");

var prepare_1 = __importDefault(require("./prepare"));

var parse_1 = __importDefault(require("./parse"));

var getExpires_1 = __importDefault(require("./getExpires"));

var getData = function getData(storage) {
  var vaultDataDictionary = storage.getItem(config_1.vaultData);

  if (!vaultDataDictionary) {
    vaultDataDictionary = {};
  }

  if (typeof vaultDataDictionary === 'string') {
    vaultDataDictionary = JSON.parse(vaultDataDictionary);
  }

  return vaultDataDictionary;
};

exports.getData = getData;

var setKeyMeta = function setKeyMeta(storage, key, config) {
  if (key === config_1.vaultData) {
    return false;
  }

  config = config || {};
  var vaultDataDictionary = (0, exports.getData)(storage);

  if (!vaultDataDictionary[key]) {
    vaultDataDictionary[key] = {};
  }

  if (config.expires) {
    var expires = (0, getExpires_1["default"])(config);
    vaultDataDictionary[key].expires = expires && expires.valueOf();
  } else {
    delete vaultDataDictionary[key].expires;
  }

  if (config.path) {
    vaultDataDictionary[key].path = config.path;
  } else {
    delete vaultDataDictionary[key].path;
  }

  storage.setItem(config_1.vaultData, (0, prepare_1["default"])(vaultDataDictionary));
};

exports.setKeyMeta = setKeyMeta;

var getKeyMeta = function getKeyMeta(storage, key) {
  if (key === config_1.vaultData) {
    return false;
  }

  try {
    var vaultDataDictionary = (0, exports.getData)(storage);
    return vaultDataDictionary[key];
  } catch (e) {
    return undefined;
  }
};

exports.getKeyMeta = getKeyMeta;

var clearKeyMeta = function clearKeyMeta(storage, key) {
  if (key === config_1.vaultData) {
    return false;
  }

  try {
    var vaultDataDictionary = (0, exports.getData)(storage);
    delete vaultDataDictionary[key];
    storage.setItem(config_1.vaultData, (0, prepare_1["default"])(vaultDataDictionary));
  } catch (e) {}
};

exports.clearKeyMeta = clearKeyMeta;

var checkKeyMeta = function checkKeyMeta(storage, key) {
  if (key === config_1.vaultData) {
    return false;
  }

  try {
    var obj = (0, parse_1["default"])(storage[key]);
    var keyMeta = (0, exports.getKeyMeta)(storage, key); // console.warn('keyMeta:', keyMeta);

    if (keyMeta) {
      if (keyMeta.path && typeof window !== 'undefined') {
        var storagePath = window.location.pathname || window.location.pathname;

        if (!storagePath.match(keyMeta.path)) {
          // console.warn('Data found for ' + key + ' but paths do not match. The browser is at ' + path + ' and the key is for ' + keyMeta.path);
          return true;
        }
      } // TODO: deprecate obj.expires


      if (!keyMeta.expires && obj && obj.expires) {
        keyMeta.expires = obj.expires;
      }

      if (keyMeta.expires && keyMeta.expires <= new Date()) {
        var expired = new Date(keyMeta.expires).toString();
        console.log('Removing expired item: ' + key + '. It expired on: ' + expired);
        (0, exports.clearKeyMeta)(storage, key);
        storage.removeItem(key);
        return true;
      }
    }
  } catch (e) {
    console.warn('Vault Error:', e);
  }

  return false;
};

exports.checkKeyMeta = checkKeyMeta;

},{"./config":4,"./getExpires":6,"./parse":9,"./prepare":10}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function default_1(value) {
  // everything in local storage is a string
  // so let's convert booleans and numbers
  // to be true booleans and numbers
  // and return those
  if (value === null || value === undefined || value === 'undefined') {
    // localStorage["foo"] returns null
    // in some browsers even if
    // foo isn't there at all.
    // since foo is really undefined,
    // we are returning accordingly
    return undefined;
  }

  if (value === 'null') {
    return null;
  }

  if (value === true || value === 'true') {
    return true;
  }

  if (value === false || value === 'false') {
    return false;
  }

  if (value !== '' && !isNaN(Number(value))) {
    return value * 1;
  }

  if (value.indexOf && (value.indexOf('{') === 0 || value.indexOf('[') === 0)) {
    try {
      return JSON.parse(value);
    } catch (e) {
      console.warn('Parse error', value);
      return value;
    }
  }

  return value;
}

exports["default"] = default_1;

},{}],10:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

function default_1(value) {
  if (value === undefined || value === null) {
    return value;
  } // depending on how the value is set, this
  // {"name": "jimmy"}
  // might return typeof to be "string"
  // in that case, we want to force it to be an object so that the next
  // block prepares it correctly.


  if (value && value.indexOf && (value.indexOf('{') === 0 || value.indexOf('[') === 0)) {
    value = JSON.parse(value);
  }

  if (_typeof(value) === 'object') {
    try {
      return JSON.stringify(value);
    } catch (e) {
      console.warn('Prepare: JSON error', e);
    }
  }

  return value;
}

exports["default"] = default_1;

},{}],11:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[1]);
